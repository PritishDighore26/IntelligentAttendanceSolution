name: Continuous Integration

on:
  push:
    branches:
      - main

concurrency:
  group: main
  cancel-in-progress: true

jobs:
  # Quality Assurance Job
  quality-assurance:
    name: Quality Assurance
    uses: ./.github/workflows/pr.yml

  # Build and Push Docker Image Job
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ias-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ias-app:latest

  # Deploy Job
  deploy:
    name: Deploy
    needs: [quality-assurance, build]
    runs-on: ubuntu-latest
    steps:
      # Configure SSH for Remote Access
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/github
          chmod 600 ~/.ssh/github
          cat >>~/.ssh/config <<END
          Host target
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/github
          LogLevel ERROR
          StrictHostKeyChecking no
          END

      # Create `.env` File on Remote Server
      - name: Create `.env` File on Remote Server
        run: |
          ssh target << 'EOF'
          cd IntelligentAttendanceSolution/
          echo "IAS_SETTINGS_SECRET_KEY=${{ secrets.IAS_SETTINGS_SECRET_KEY }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env
          echo "IAS_SETTINGS_CAMERA_IP=${{ vars.IAS_SETTINGS_CAMERA_IP }}" >> .env
          cat .env
          EOF

      # Run Deployment Commands
      - name: Run Deploy
        run: |
          ssh target << 'EOF'
          cd IntelligentAttendanceSolution/
          docker-compose down
          docker rmi ${{ secrets.DOCKER_USERNAME }}/ias-app:latest || true
          git fetch --all
          git checkout develop
          git pull
          docker-compose pull
          docker-compose up -d --force-recreate
          EOF

      # Clean Up Unnecessary Files on Remote Server
      - name: Clean Up Remote Server
        run: |
          ssh target << 'EOF'
          cd IntelligentAttendanceSolution/
          sudo rm -rf Dockerfile Dockerfile.base mypy.ini requirements.txt \
            shape_predictor_68_face_landmarks.dat IAS/ Procfile dependencies/ \
            pyproject.toml scripts/ staticfiles/
          EOF
